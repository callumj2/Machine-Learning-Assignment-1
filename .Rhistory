x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
y = matrix(c(x1 - mean(x1), x2 - mean(x2), x3 - mean(x3)), 1)
t(y) %*% y
x1
results <- vector("list", 1000)
iterations <- c(1:1000)
results <- vector("list", 1000)
iterations <- c(1:1000)
for (val in iterations) {
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
y = matrix(c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3)), 1)
results[i] <- t(y) %*% y
}
for (val in iterations) {
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
y = matrix(c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3)), 1)
results[val] <- t(y) %*% y
}
warnings()
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
y = matrix(c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3)), 1)
t(y) %*% y
y
mean(x1,x2,x3)
mean(1,1)
c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
ylist
x1
y = matrix(ylist, 1)
y
y = matrix(ylist)
y
t(y) %*% y
for (val in iterations) {
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
results[val] <- t(y) %*% y
}
plot(results)
plot(c(iterations,results))
plot(iterations,results)
plot(iterations,results)
mean(results)
results[4]
results[4][1]
results[4][1][1]
results[4][1][1][1]
sum(results)
t(y) %*% y
yty = t(y) %*% y
dim(yty)
dim(1)
results[1] + results[2]
results[1][1][1] + results[2][1][1]
results[1][1][1][1] + results[2][1][1][1]
results[1][c(1,1)]
X
X[c(1,1)]
X[1,1]
results[1][1,1]
dim(results[1])
results[1]
mean(results)
summary(results)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 2)
x2 = rnorm(1, 0, 2)
x3 = rnorm(1, 0, 2)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 3)
x2 = rnorm(1, 0, 3)
x3 = rnorm(1, 0, 3)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 3)
x2 = rnorm(1, 0, 3)
x3 = rnorm(1, 0, 3)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
r
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
plot(iterations,results)
y
knitr::opts_chunk$set(echo = TRUE)
A = matrix(c(-1,0,0,0,0,0,0,0,0),3)
A
print(A)
## Now A squared
print(A %*% A)
## Now A^3
print(A %*% A %*% A)
x <- c(8,12,14,16,16,20)
y <- c(8,15,16,20,25,40)
plot(x,y)
plot(1)
plot(x,y)
abline(y = x)
abline(a ~ b, a = b)
abline(y = x)
abline(y == x)
abline(y)
# Q2
X <- cbind(rep(1,6), x)
X
# Q3
t(X) %*% X
t(X) %*% y
# Q3
t(X) %*% X
#Q4 Solve:
b <- solve(t(X) %*% X, t(X) %*% y)
plot(X[,2], y)
#Q4 Solve:
b <- solve(t(X) %*% X, t(X) %*% y)
b
curve(b[1] + b[2]*x, add=TRUE, col = "red")
avgresults <- vector("list", 50)
avgiters <- c(1:50)
avgresults <- vector("list", 10)
avgiters <- c(1:10)
avgresults <- vector("list", 10)
avgiters <- c(1:10)
for (iter in avgiters) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/1000
}
plot(avgiters,avgresults)
lm(avgiters ~ avgresults)
avgresults <- vector("list", 25)
avgiters <- c(1:25)
for (iter in avgiters) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/1000
}
plot(avgiters,avgresults)
avgresults <- vector("list", 75)
avgiters <- c(1:75)
for (iter in avgiters) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/1000
}
plot(avgiters,avgresults)
avgresults <- vector("list", 75)
avgiters <- c(1:75)
for (iter in avgiters) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/(1000 * 2)
}
plot(avgiters,avgresults)
avgresults <- vector("list", 75)
stddevs <- c(1:75)
avgresults <- vector("list", 100)
stddevs <- c(1:100)
for (iter in stddevs) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/(1000)
}
plot(avgiters,avgresults)
plot(stddevs,avgresults)
#Q8
#cooks distance
model = lm(x ~ y)
#Q8
#cooks distance
model = lm(x,y)
#Q8
#cooks distance
model = lm(x ~ y)
length(y)
y <- c(8,15,16,20,25,40)
length(y)
#Q8
#cooks distance
model = lm(x ~ y)
cooks.distance(model)
plot(model, which = 5)
plot(model, which = 3)
plot(model, which = 1)
#Q8
# H
H <- X %*% solve(t(X) %*% X) %*% t(X)
H
avgresults <- vector("list", 100)
stddevs <- c(1:100)
for (iter in stddevs) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/(1000)
}
plot(stddevs,avgresults)
knitr::opts_chunk$set(echo = TRUE)
## Load in the data
X <- c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6)
y <- c(27.3,42.4,38.7,4.5,23.0,166.3,109.7,80.1,150.7,20.3,189.7,131.3,404.2,149.0)
## Load in the data
X <- matrix( rep(1:6),c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6), 2)
## Load in the data
X <- matrix( rep(1:13),c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6), 2)
X
## Load in the data
X <- matrix( rep(1,13),c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6), 2)
X
## Load in the data
X <- cbind(rep(1,13),c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6))
## Load in the data
x <- c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6))
## Load in the data
x <- c(13.1,15.3,25.8,1.8,4.9,55.4,39.3,26.7,47.5,6.6,94.7,61.1,135.6,47.6)
y <- c(27.3,42.4,38.7,4.5,23.0,166.3,109.7,80.1,150.7,20.3,189.7,131.3,404.2,149.0)
X <- cbind(rep(1,13),x)
X <- cbind(rep(1,14),x)
X
## Define the normal equations:
norm1 = t(X) %*% X
norm2 = t(X) %*% y
solve(norm1,norm2)
b<- solve(norm1,norm2)
cat("b0 = ", b[1], ", b1 = ", b[2])
e <- y - X %*% b
s2 <- SSRes/(14 - 2)
SSRes <- sum(e^2)
s2 <- SSRes/(14 - 2)
cat("The sample variance is", s2)
## Define the normal equations:
norm1 = t(X) %*% X
norm2 = t(X) %*% y
b<- solve(norm1,norm2)
b0 <- b[1]
b1 <- b[2]
cat("b0 = ", b0, ", b1 = ", b1)
y_hat <- 28*b1 + b0
y_hat <- 28*b1 + b0
cat("The predicted price for ocean trout in 1980 is: ", y_hat)
## Create H, the hat matrix
H <- X %*% solve(t(X) %*% X) %*% t(X)
H
## Create H, the hat matrix
H <- X %*% solve(t(X) %*% X) %*% t(X)
z13 = (e[13])
z13
z13 = e[13]/(sqrt(s2(1-H[13][13])))
z13 = e[13]/(sqrt(s2*(1-H[13][13])))
z13 = e[13]/(sqrt(s2*(1-H[13][13])))
cat("The standardised residual for sea scallops is: ", z13)
cat("The standardised residual for sea scallops is: ", H[13][13])
z13 = e[13]/(sqrt(s2*(1-H[13][13])))
cat("The standardised residual for sea scallops is: ", H[13][13])
H
H[13,13]
z13 = e[13]/(sqrt(s2*(1-H[13,13])))
cat("The standardised residual for sea scallops is: ", z13)
D13 = (1/2) * (z13)^2 * (H[13,13]/(1 - H[13,13]))
cat("The Cook's distance for sea scallops is: ", D13)
D13 = (1/2) * (z13)^2 * (H[13,13]/(1 - H[13,13]))
cat("The Cook's distance for sea scallops is: ", D13)
A = eye(4)
A = diag(4)
A
B = 2*diag(4)
B
A %*% B
avgresults
avgresults
avgresults <- vector("list", 100)
stddevs <- c(1:100)
for (iter in stddevs) {
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, iter)
x2 = rnorm(1, 0, iter)
x3 = rnorm(1, 0, iter)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
avgresults[iter] = sum/(1000)
}
plot(stddevs,avgresults)
plot(stddevs^2,avgresults)
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 1)
x2 = rnorm(1, 0, 1)
x3 = rnorm(1, 0, 1)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 2)
x2 = rnorm(1, 0, 2)
x3 = rnorm(1, 0, 2)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
results <- vector("list", 1000)
iterations <- c(1:1000)
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 3)
x2 = rnorm(1, 0, 3)
x3 = rnorm(1, 0, 3)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
37/9
15/4
3.85/1
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 4)
x2 = rnorm(1, 0, 4)
x3 = rnorm(1, 0, 4)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
65/16
for (val in iterations) {
x1 = rnorm(1, 0, 5)
x2 = rnorm(1, 0, 5)
x3 = rnorm(1, 0, 5)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
162/25
sum = 0
for (val in iterations) {
x1 = rnorm(1, 0, 5)
x2 = rnorm(1, 0, 5)
x3 = rnorm(1, 0, 5)
ylist = c(x1 - mean(x1,x2,x3), x2 - mean(x1,x2,x3), x3 - mean(x1,x2,x3))
y = matrix(ylist)
yty = t(y) %*% y
sum = sum + yty
}
sum/1000
102/25
mean(sum)
source('C:/Users/callu/Dropbox/University/2021 Semester 1/Linear Statistical Models/wk4tute.R')
x <- c(8,12,14,16,16,20)
y <- c(8,15,16,20,25,40)
plot(x,y)
abline(y)
# Q2
X <- cbind(rep(1,6), x)
# Q3
t(X) %*% X
t(X) %*% y
#Q4 Solve:
b <- solve(t(X) %*% X, t(X) %*% y)
b
plot(X[,2], y)
curve(b[1] + b[2]*x, add=TRUE, col = "red")
#Q8
# H
H <- X %*% solve(t(X) %*% X) %*% t(X)
H
#cooks distance
model = lm(x ~ y)
cooks.distance(model)
plot(model, which = 1)
########## WEEK 5 ############
# a) 95% CI for model parameters
b[1] + c(-1,1)*qt(0.975, df = n - p)*s*sqrt(c[1,1])
########## WEEK 5 ############
# a) 95% CI for model parameters
s = sd(x)
b[1] + c(-1,1)*qt(0.975, df = n - p)*s*sqrt(c[1,1])
source('C:/Users/callu/Dropbox/University/2021 Semester 1/Linear Statistical Models/wk4tute.R')
source('C:/Users/callu/Dropbox/University/2021 Semester 1/Linear Statistical Models/wk4tute.R')
setwd("C:\\users\\callum\\dropbox\\University\\2021 Semester 1\\Machine Learning\\Assignments\\Assignment 1")
data = read.csv("test.csv", header = FALSE)
View(data)
